// Code generated by ent, DO NOT EDIT.

package subject

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the subject type in the database.
	Label = "subject"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldPrecedesSubjectID holds the string denoting the precedes_subject_id field in the database.
	FieldPrecedesSubjectID = "precedes_subject_id"
	// FieldSubjectName holds the string denoting the subject_name field in the database.
	FieldSubjectName = "subject_name"
	// FieldSubjectCode holds the string denoting the subject_code field in the database.
	FieldSubjectCode = "subject_code"
	// FieldCareerName holds the string denoting the career_name field in the database.
	FieldCareerName = "career_name"
	// FieldTrimester holds the string denoting the trimester field in the database.
	FieldTrimester = "trimester"
	// EdgePrecedesSubject holds the string denoting the precedes_subject edge name in mutations.
	EdgePrecedesSubject = "precedes_subject"
	// EdgeNextSubject holds the string denoting the next_subject edge name in mutations.
	EdgeNextSubject = "next_subject"
	// Table holds the table name of the subject in the database.
	Table = "subjects"
	// PrecedesSubjectTable is the table that holds the precedes_subject relation/edge.
	PrecedesSubjectTable = "subjects"
	// PrecedesSubjectColumn is the table column denoting the precedes_subject relation/edge.
	PrecedesSubjectColumn = "precedes_subject_id"
	// NextSubjectTable is the table that holds the next_subject relation/edge.
	NextSubjectTable = "subjects"
	// NextSubjectColumn is the table column denoting the next_subject relation/edge.
	NextSubjectColumn = "precedes_subject_id"
)

// Columns holds all SQL columns for subject fields.
var Columns = []string{
	FieldID,
	FieldPrecedesSubjectID,
	FieldSubjectName,
	FieldSubjectCode,
	FieldCareerName,
	FieldTrimester,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// SubjectNameValidator is a validator for the "subject_name" field. It is called by the builders before save.
	SubjectNameValidator func(string) error
	// SubjectCodeValidator is a validator for the "subject_code" field. It is called by the builders before save.
	SubjectCodeValidator func(string) error
	// CareerNameValidator is a validator for the "career_name" field. It is called by the builders before save.
	CareerNameValidator func(string) error
)

// OrderOption defines the ordering options for the Subject queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByPrecedesSubjectID orders the results by the precedes_subject_id field.
func ByPrecedesSubjectID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPrecedesSubjectID, opts...).ToFunc()
}

// BySubjectName orders the results by the subject_name field.
func BySubjectName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSubjectName, opts...).ToFunc()
}

// BySubjectCode orders the results by the subject_code field.
func BySubjectCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSubjectCode, opts...).ToFunc()
}

// ByCareerName orders the results by the career_name field.
func ByCareerName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCareerName, opts...).ToFunc()
}

// ByTrimester orders the results by the trimester field.
func ByTrimester(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTrimester, opts...).ToFunc()
}

// ByPrecedesSubjectField orders the results by precedes_subject field.
func ByPrecedesSubjectField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPrecedesSubjectStep(), sql.OrderByField(field, opts...))
	}
}

// ByNextSubjectCount orders the results by next_subject count.
func ByNextSubjectCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newNextSubjectStep(), opts...)
	}
}

// ByNextSubject orders the results by next_subject terms.
func ByNextSubject(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newNextSubjectStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newPrecedesSubjectStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Table, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, PrecedesSubjectTable, PrecedesSubjectColumn),
	)
}
func newNextSubjectStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Table, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, NextSubjectTable, NextSubjectColumn),
	)
}
