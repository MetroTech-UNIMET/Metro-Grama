// Code generated by ent, DO NOT EDIT.

package ent

import (
	"metrograma/ent/career"
	"metrograma/ent/schema"
	"metrograma/ent/subject"

	"github.com/google/uuid"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	careerFields := schema.Career{}.Fields()
	_ = careerFields
	// careerDescName is the schema descriptor for name field.
	careerDescName := careerFields[1].Descriptor()
	// career.NameValidator is a validator for the "name" field. It is called by the builders before save.
	career.NameValidator = careerDescName.Validators[0].(func(string) error)
	// careerDescID is the schema descriptor for id field.
	careerDescID := careerFields[0].Descriptor()
	// career.DefaultID holds the default value on creation for the id field.
	career.DefaultID = careerDescID.Default.(func() uuid.UUID)
	subjectFields := schema.Subject{}.Fields()
	_ = subjectFields
	// subjectDescSubjectName is the schema descriptor for subject_name field.
	subjectDescSubjectName := subjectFields[2].Descriptor()
	// subject.SubjectNameValidator is a validator for the "subject_name" field. It is called by the builders before save.
	subject.SubjectNameValidator = subjectDescSubjectName.Validators[0].(func(string) error)
	// subjectDescSubjectCode is the schema descriptor for subject_code field.
	subjectDescSubjectCode := subjectFields[3].Descriptor()
	// subject.SubjectCodeValidator is a validator for the "subject_code" field. It is called by the builders before save.
	subject.SubjectCodeValidator = subjectDescSubjectCode.Validators[0].(func(string) error)
	// subjectDescID is the schema descriptor for id field.
	subjectDescID := subjectFields[0].Descriptor()
	// subject.DefaultID holds the default value on creation for the id field.
	subject.DefaultID = subjectDescID.Default.(func() uuid.UUID)
}
