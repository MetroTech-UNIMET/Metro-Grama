// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"metrograma/ent/career"
	"metrograma/ent/predicate"
	"metrograma/ent/subject"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// SubjectUpdate is the builder for updating Subject entities.
type SubjectUpdate struct {
	config
	hooks    []Hook
	mutation *SubjectMutation
}

// Where appends a list predicates to the SubjectUpdate builder.
func (su *SubjectUpdate) Where(ps ...predicate.Subject) *SubjectUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetSubjectName sets the "subject_name" field.
func (su *SubjectUpdate) SetSubjectName(s string) *SubjectUpdate {
	su.mutation.SetSubjectName(s)
	return su
}

// SetNillableSubjectName sets the "subject_name" field if the given value is not nil.
func (su *SubjectUpdate) SetNillableSubjectName(s *string) *SubjectUpdate {
	if s != nil {
		su.SetSubjectName(*s)
	}
	return su
}

// SetSubjectCode sets the "subject_code" field.
func (su *SubjectUpdate) SetSubjectCode(s string) *SubjectUpdate {
	su.mutation.SetSubjectCode(s)
	return su
}

// SetNillableSubjectCode sets the "subject_code" field if the given value is not nil.
func (su *SubjectUpdate) SetNillableSubjectCode(s *string) *SubjectUpdate {
	if s != nil {
		su.SetSubjectCode(*s)
	}
	return su
}

// SetTrimester sets the "trimester" field.
func (su *SubjectUpdate) SetTrimester(u uint) *SubjectUpdate {
	su.mutation.ResetTrimester()
	su.mutation.SetTrimester(u)
	return su
}

// SetNillableTrimester sets the "trimester" field if the given value is not nil.
func (su *SubjectUpdate) SetNillableTrimester(u *uint) *SubjectUpdate {
	if u != nil {
		su.SetTrimester(*u)
	}
	return su
}

// AddTrimester adds u to the "trimester" field.
func (su *SubjectUpdate) AddTrimester(u int) *SubjectUpdate {
	su.mutation.AddTrimester(u)
	return su
}

// AddPrecedeSubjectIDs adds the "precede_subjects" edge to the Subject entity by IDs.
func (su *SubjectUpdate) AddPrecedeSubjectIDs(ids ...uuid.UUID) *SubjectUpdate {
	su.mutation.AddPrecedeSubjectIDs(ids...)
	return su
}

// AddPrecedeSubjects adds the "precede_subjects" edges to the Subject entity.
func (su *SubjectUpdate) AddPrecedeSubjects(s ...*Subject) *SubjectUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.AddPrecedeSubjectIDs(ids...)
}

// AddNextSubjectIDs adds the "next_subject" edge to the Subject entity by IDs.
func (su *SubjectUpdate) AddNextSubjectIDs(ids ...uuid.UUID) *SubjectUpdate {
	su.mutation.AddNextSubjectIDs(ids...)
	return su
}

// AddNextSubject adds the "next_subject" edges to the Subject entity.
func (su *SubjectUpdate) AddNextSubject(s ...*Subject) *SubjectUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.AddNextSubjectIDs(ids...)
}

// AddCarrerIDs adds the "carrer" edge to the Career entity by IDs.
func (su *SubjectUpdate) AddCarrerIDs(ids ...uuid.UUID) *SubjectUpdate {
	su.mutation.AddCarrerIDs(ids...)
	return su
}

// AddCarrer adds the "carrer" edges to the Career entity.
func (su *SubjectUpdate) AddCarrer(c ...*Career) *SubjectUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return su.AddCarrerIDs(ids...)
}

// Mutation returns the SubjectMutation object of the builder.
func (su *SubjectUpdate) Mutation() *SubjectMutation {
	return su.mutation
}

// ClearPrecedeSubjects clears all "precede_subjects" edges to the Subject entity.
func (su *SubjectUpdate) ClearPrecedeSubjects() *SubjectUpdate {
	su.mutation.ClearPrecedeSubjects()
	return su
}

// RemovePrecedeSubjectIDs removes the "precede_subjects" edge to Subject entities by IDs.
func (su *SubjectUpdate) RemovePrecedeSubjectIDs(ids ...uuid.UUID) *SubjectUpdate {
	su.mutation.RemovePrecedeSubjectIDs(ids...)
	return su
}

// RemovePrecedeSubjects removes "precede_subjects" edges to Subject entities.
func (su *SubjectUpdate) RemovePrecedeSubjects(s ...*Subject) *SubjectUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.RemovePrecedeSubjectIDs(ids...)
}

// ClearNextSubject clears all "next_subject" edges to the Subject entity.
func (su *SubjectUpdate) ClearNextSubject() *SubjectUpdate {
	su.mutation.ClearNextSubject()
	return su
}

// RemoveNextSubjectIDs removes the "next_subject" edge to Subject entities by IDs.
func (su *SubjectUpdate) RemoveNextSubjectIDs(ids ...uuid.UUID) *SubjectUpdate {
	su.mutation.RemoveNextSubjectIDs(ids...)
	return su
}

// RemoveNextSubject removes "next_subject" edges to Subject entities.
func (su *SubjectUpdate) RemoveNextSubject(s ...*Subject) *SubjectUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.RemoveNextSubjectIDs(ids...)
}

// ClearCarrer clears all "carrer" edges to the Career entity.
func (su *SubjectUpdate) ClearCarrer() *SubjectUpdate {
	su.mutation.ClearCarrer()
	return su
}

// RemoveCarrerIDs removes the "carrer" edge to Career entities by IDs.
func (su *SubjectUpdate) RemoveCarrerIDs(ids ...uuid.UUID) *SubjectUpdate {
	su.mutation.RemoveCarrerIDs(ids...)
	return su
}

// RemoveCarrer removes "carrer" edges to Career entities.
func (su *SubjectUpdate) RemoveCarrer(c ...*Career) *SubjectUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return su.RemoveCarrerIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SubjectUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *SubjectUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SubjectUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SubjectUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (su *SubjectUpdate) check() error {
	if v, ok := su.mutation.SubjectName(); ok {
		if err := subject.SubjectNameValidator(v); err != nil {
			return &ValidationError{Name: "subject_name", err: fmt.Errorf(`ent: validator failed for field "Subject.subject_name": %w`, err)}
		}
	}
	if v, ok := su.mutation.SubjectCode(); ok {
		if err := subject.SubjectCodeValidator(v); err != nil {
			return &ValidationError{Name: "subject_code", err: fmt.Errorf(`ent: validator failed for field "Subject.subject_code": %w`, err)}
		}
	}
	return nil
}

func (su *SubjectUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := su.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(subject.Table, subject.Columns, sqlgraph.NewFieldSpec(subject.FieldID, field.TypeUUID))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.SubjectName(); ok {
		_spec.SetField(subject.FieldSubjectName, field.TypeString, value)
	}
	if value, ok := su.mutation.SubjectCode(); ok {
		_spec.SetField(subject.FieldSubjectCode, field.TypeString, value)
	}
	if value, ok := su.mutation.Trimester(); ok {
		_spec.SetField(subject.FieldTrimester, field.TypeUint, value)
	}
	if value, ok := su.mutation.AddedTrimester(); ok {
		_spec.AddField(subject.FieldTrimester, field.TypeUint, value)
	}
	if su.mutation.PrecedeSubjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   subject.PrecedeSubjectsTable,
			Columns: subject.PrecedeSubjectsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subject.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedPrecedeSubjectsIDs(); len(nodes) > 0 && !su.mutation.PrecedeSubjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   subject.PrecedeSubjectsTable,
			Columns: subject.PrecedeSubjectsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subject.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.PrecedeSubjectsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   subject.PrecedeSubjectsTable,
			Columns: subject.PrecedeSubjectsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subject.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.NextSubjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   subject.NextSubjectTable,
			Columns: subject.NextSubjectPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subject.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedNextSubjectIDs(); len(nodes) > 0 && !su.mutation.NextSubjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   subject.NextSubjectTable,
			Columns: subject.NextSubjectPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subject.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.NextSubjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   subject.NextSubjectTable,
			Columns: subject.NextSubjectPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subject.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.CarrerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   subject.CarrerTable,
			Columns: subject.CarrerPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(career.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedCarrerIDs(); len(nodes) > 0 && !su.mutation.CarrerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   subject.CarrerTable,
			Columns: subject.CarrerPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(career.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.CarrerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   subject.CarrerTable,
			Columns: subject.CarrerPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(career.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subject.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// SubjectUpdateOne is the builder for updating a single Subject entity.
type SubjectUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SubjectMutation
}

// SetSubjectName sets the "subject_name" field.
func (suo *SubjectUpdateOne) SetSubjectName(s string) *SubjectUpdateOne {
	suo.mutation.SetSubjectName(s)
	return suo
}

// SetNillableSubjectName sets the "subject_name" field if the given value is not nil.
func (suo *SubjectUpdateOne) SetNillableSubjectName(s *string) *SubjectUpdateOne {
	if s != nil {
		suo.SetSubjectName(*s)
	}
	return suo
}

// SetSubjectCode sets the "subject_code" field.
func (suo *SubjectUpdateOne) SetSubjectCode(s string) *SubjectUpdateOne {
	suo.mutation.SetSubjectCode(s)
	return suo
}

// SetNillableSubjectCode sets the "subject_code" field if the given value is not nil.
func (suo *SubjectUpdateOne) SetNillableSubjectCode(s *string) *SubjectUpdateOne {
	if s != nil {
		suo.SetSubjectCode(*s)
	}
	return suo
}

// SetTrimester sets the "trimester" field.
func (suo *SubjectUpdateOne) SetTrimester(u uint) *SubjectUpdateOne {
	suo.mutation.ResetTrimester()
	suo.mutation.SetTrimester(u)
	return suo
}

// SetNillableTrimester sets the "trimester" field if the given value is not nil.
func (suo *SubjectUpdateOne) SetNillableTrimester(u *uint) *SubjectUpdateOne {
	if u != nil {
		suo.SetTrimester(*u)
	}
	return suo
}

// AddTrimester adds u to the "trimester" field.
func (suo *SubjectUpdateOne) AddTrimester(u int) *SubjectUpdateOne {
	suo.mutation.AddTrimester(u)
	return suo
}

// AddPrecedeSubjectIDs adds the "precede_subjects" edge to the Subject entity by IDs.
func (suo *SubjectUpdateOne) AddPrecedeSubjectIDs(ids ...uuid.UUID) *SubjectUpdateOne {
	suo.mutation.AddPrecedeSubjectIDs(ids...)
	return suo
}

// AddPrecedeSubjects adds the "precede_subjects" edges to the Subject entity.
func (suo *SubjectUpdateOne) AddPrecedeSubjects(s ...*Subject) *SubjectUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.AddPrecedeSubjectIDs(ids...)
}

// AddNextSubjectIDs adds the "next_subject" edge to the Subject entity by IDs.
func (suo *SubjectUpdateOne) AddNextSubjectIDs(ids ...uuid.UUID) *SubjectUpdateOne {
	suo.mutation.AddNextSubjectIDs(ids...)
	return suo
}

// AddNextSubject adds the "next_subject" edges to the Subject entity.
func (suo *SubjectUpdateOne) AddNextSubject(s ...*Subject) *SubjectUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.AddNextSubjectIDs(ids...)
}

// AddCarrerIDs adds the "carrer" edge to the Career entity by IDs.
func (suo *SubjectUpdateOne) AddCarrerIDs(ids ...uuid.UUID) *SubjectUpdateOne {
	suo.mutation.AddCarrerIDs(ids...)
	return suo
}

// AddCarrer adds the "carrer" edges to the Career entity.
func (suo *SubjectUpdateOne) AddCarrer(c ...*Career) *SubjectUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return suo.AddCarrerIDs(ids...)
}

// Mutation returns the SubjectMutation object of the builder.
func (suo *SubjectUpdateOne) Mutation() *SubjectMutation {
	return suo.mutation
}

// ClearPrecedeSubjects clears all "precede_subjects" edges to the Subject entity.
func (suo *SubjectUpdateOne) ClearPrecedeSubjects() *SubjectUpdateOne {
	suo.mutation.ClearPrecedeSubjects()
	return suo
}

// RemovePrecedeSubjectIDs removes the "precede_subjects" edge to Subject entities by IDs.
func (suo *SubjectUpdateOne) RemovePrecedeSubjectIDs(ids ...uuid.UUID) *SubjectUpdateOne {
	suo.mutation.RemovePrecedeSubjectIDs(ids...)
	return suo
}

// RemovePrecedeSubjects removes "precede_subjects" edges to Subject entities.
func (suo *SubjectUpdateOne) RemovePrecedeSubjects(s ...*Subject) *SubjectUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.RemovePrecedeSubjectIDs(ids...)
}

// ClearNextSubject clears all "next_subject" edges to the Subject entity.
func (suo *SubjectUpdateOne) ClearNextSubject() *SubjectUpdateOne {
	suo.mutation.ClearNextSubject()
	return suo
}

// RemoveNextSubjectIDs removes the "next_subject" edge to Subject entities by IDs.
func (suo *SubjectUpdateOne) RemoveNextSubjectIDs(ids ...uuid.UUID) *SubjectUpdateOne {
	suo.mutation.RemoveNextSubjectIDs(ids...)
	return suo
}

// RemoveNextSubject removes "next_subject" edges to Subject entities.
func (suo *SubjectUpdateOne) RemoveNextSubject(s ...*Subject) *SubjectUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.RemoveNextSubjectIDs(ids...)
}

// ClearCarrer clears all "carrer" edges to the Career entity.
func (suo *SubjectUpdateOne) ClearCarrer() *SubjectUpdateOne {
	suo.mutation.ClearCarrer()
	return suo
}

// RemoveCarrerIDs removes the "carrer" edge to Career entities by IDs.
func (suo *SubjectUpdateOne) RemoveCarrerIDs(ids ...uuid.UUID) *SubjectUpdateOne {
	suo.mutation.RemoveCarrerIDs(ids...)
	return suo
}

// RemoveCarrer removes "carrer" edges to Career entities.
func (suo *SubjectUpdateOne) RemoveCarrer(c ...*Career) *SubjectUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return suo.RemoveCarrerIDs(ids...)
}

// Where appends a list predicates to the SubjectUpdate builder.
func (suo *SubjectUpdateOne) Where(ps ...predicate.Subject) *SubjectUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SubjectUpdateOne) Select(field string, fields ...string) *SubjectUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Subject entity.
func (suo *SubjectUpdateOne) Save(ctx context.Context) (*Subject, error) {
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SubjectUpdateOne) SaveX(ctx context.Context) *Subject {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SubjectUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SubjectUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suo *SubjectUpdateOne) check() error {
	if v, ok := suo.mutation.SubjectName(); ok {
		if err := subject.SubjectNameValidator(v); err != nil {
			return &ValidationError{Name: "subject_name", err: fmt.Errorf(`ent: validator failed for field "Subject.subject_name": %w`, err)}
		}
	}
	if v, ok := suo.mutation.SubjectCode(); ok {
		if err := subject.SubjectCodeValidator(v); err != nil {
			return &ValidationError{Name: "subject_code", err: fmt.Errorf(`ent: validator failed for field "Subject.subject_code": %w`, err)}
		}
	}
	return nil
}

func (suo *SubjectUpdateOne) sqlSave(ctx context.Context) (_node *Subject, err error) {
	if err := suo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(subject.Table, subject.Columns, sqlgraph.NewFieldSpec(subject.FieldID, field.TypeUUID))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Subject.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, subject.FieldID)
		for _, f := range fields {
			if !subject.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != subject.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.SubjectName(); ok {
		_spec.SetField(subject.FieldSubjectName, field.TypeString, value)
	}
	if value, ok := suo.mutation.SubjectCode(); ok {
		_spec.SetField(subject.FieldSubjectCode, field.TypeString, value)
	}
	if value, ok := suo.mutation.Trimester(); ok {
		_spec.SetField(subject.FieldTrimester, field.TypeUint, value)
	}
	if value, ok := suo.mutation.AddedTrimester(); ok {
		_spec.AddField(subject.FieldTrimester, field.TypeUint, value)
	}
	if suo.mutation.PrecedeSubjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   subject.PrecedeSubjectsTable,
			Columns: subject.PrecedeSubjectsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subject.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedPrecedeSubjectsIDs(); len(nodes) > 0 && !suo.mutation.PrecedeSubjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   subject.PrecedeSubjectsTable,
			Columns: subject.PrecedeSubjectsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subject.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.PrecedeSubjectsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   subject.PrecedeSubjectsTable,
			Columns: subject.PrecedeSubjectsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subject.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.NextSubjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   subject.NextSubjectTable,
			Columns: subject.NextSubjectPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subject.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedNextSubjectIDs(); len(nodes) > 0 && !suo.mutation.NextSubjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   subject.NextSubjectTable,
			Columns: subject.NextSubjectPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subject.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.NextSubjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   subject.NextSubjectTable,
			Columns: subject.NextSubjectPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subject.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.CarrerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   subject.CarrerTable,
			Columns: subject.CarrerPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(career.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedCarrerIDs(); len(nodes) > 0 && !suo.mutation.CarrerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   subject.CarrerTable,
			Columns: subject.CarrerPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(career.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.CarrerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   subject.CarrerTable,
			Columns: subject.CarrerPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(career.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Subject{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subject.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
