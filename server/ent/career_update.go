// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"metrograma/ent/career"
	"metrograma/ent/predicate"
	"metrograma/ent/subject"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// CareerUpdate is the builder for updating Career entities.
type CareerUpdate struct {
	config
	hooks    []Hook
	mutation *CareerMutation
}

// Where appends a list predicates to the CareerUpdate builder.
func (cu *CareerUpdate) Where(ps ...predicate.Career) *CareerUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetName sets the "name" field.
func (cu *CareerUpdate) SetName(s string) *CareerUpdate {
	cu.mutation.SetName(s)
	return cu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cu *CareerUpdate) SetNillableName(s *string) *CareerUpdate {
	if s != nil {
		cu.SetName(*s)
	}
	return cu
}

// AddSubjectIDs adds the "subjects" edge to the Subject entity by IDs.
func (cu *CareerUpdate) AddSubjectIDs(ids ...uuid.UUID) *CareerUpdate {
	cu.mutation.AddSubjectIDs(ids...)
	return cu
}

// AddSubjects adds the "subjects" edges to the Subject entity.
func (cu *CareerUpdate) AddSubjects(s ...*Subject) *CareerUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cu.AddSubjectIDs(ids...)
}

// Mutation returns the CareerMutation object of the builder.
func (cu *CareerUpdate) Mutation() *CareerMutation {
	return cu.mutation
}

// ClearSubjects clears all "subjects" edges to the Subject entity.
func (cu *CareerUpdate) ClearSubjects() *CareerUpdate {
	cu.mutation.ClearSubjects()
	return cu
}

// RemoveSubjectIDs removes the "subjects" edge to Subject entities by IDs.
func (cu *CareerUpdate) RemoveSubjectIDs(ids ...uuid.UUID) *CareerUpdate {
	cu.mutation.RemoveSubjectIDs(ids...)
	return cu
}

// RemoveSubjects removes "subjects" edges to Subject entities.
func (cu *CareerUpdate) RemoveSubjects(s ...*Subject) *CareerUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cu.RemoveSubjectIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CareerUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CareerUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CareerUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CareerUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *CareerUpdate) check() error {
	if v, ok := cu.mutation.Name(); ok {
		if err := career.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Career.name": %w`, err)}
		}
	}
	return nil
}

func (cu *CareerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(career.Table, career.Columns, sqlgraph.NewFieldSpec(career.FieldID, field.TypeUUID))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.Name(); ok {
		_spec.SetField(career.FieldName, field.TypeString, value)
	}
	if cu.mutation.SubjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   career.SubjectsTable,
			Columns: career.SubjectsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subject.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedSubjectsIDs(); len(nodes) > 0 && !cu.mutation.SubjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   career.SubjectsTable,
			Columns: career.SubjectsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subject.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.SubjectsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   career.SubjectsTable,
			Columns: career.SubjectsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subject.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{career.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CareerUpdateOne is the builder for updating a single Career entity.
type CareerUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CareerMutation
}

// SetName sets the "name" field.
func (cuo *CareerUpdateOne) SetName(s string) *CareerUpdateOne {
	cuo.mutation.SetName(s)
	return cuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cuo *CareerUpdateOne) SetNillableName(s *string) *CareerUpdateOne {
	if s != nil {
		cuo.SetName(*s)
	}
	return cuo
}

// AddSubjectIDs adds the "subjects" edge to the Subject entity by IDs.
func (cuo *CareerUpdateOne) AddSubjectIDs(ids ...uuid.UUID) *CareerUpdateOne {
	cuo.mutation.AddSubjectIDs(ids...)
	return cuo
}

// AddSubjects adds the "subjects" edges to the Subject entity.
func (cuo *CareerUpdateOne) AddSubjects(s ...*Subject) *CareerUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cuo.AddSubjectIDs(ids...)
}

// Mutation returns the CareerMutation object of the builder.
func (cuo *CareerUpdateOne) Mutation() *CareerMutation {
	return cuo.mutation
}

// ClearSubjects clears all "subjects" edges to the Subject entity.
func (cuo *CareerUpdateOne) ClearSubjects() *CareerUpdateOne {
	cuo.mutation.ClearSubjects()
	return cuo
}

// RemoveSubjectIDs removes the "subjects" edge to Subject entities by IDs.
func (cuo *CareerUpdateOne) RemoveSubjectIDs(ids ...uuid.UUID) *CareerUpdateOne {
	cuo.mutation.RemoveSubjectIDs(ids...)
	return cuo
}

// RemoveSubjects removes "subjects" edges to Subject entities.
func (cuo *CareerUpdateOne) RemoveSubjects(s ...*Subject) *CareerUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cuo.RemoveSubjectIDs(ids...)
}

// Where appends a list predicates to the CareerUpdate builder.
func (cuo *CareerUpdateOne) Where(ps ...predicate.Career) *CareerUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CareerUpdateOne) Select(field string, fields ...string) *CareerUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Career entity.
func (cuo *CareerUpdateOne) Save(ctx context.Context) (*Career, error) {
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CareerUpdateOne) SaveX(ctx context.Context) *Career {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CareerUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CareerUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *CareerUpdateOne) check() error {
	if v, ok := cuo.mutation.Name(); ok {
		if err := career.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Career.name": %w`, err)}
		}
	}
	return nil
}

func (cuo *CareerUpdateOne) sqlSave(ctx context.Context) (_node *Career, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(career.Table, career.Columns, sqlgraph.NewFieldSpec(career.FieldID, field.TypeUUID))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Career.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, career.FieldID)
		for _, f := range fields {
			if !career.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != career.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.Name(); ok {
		_spec.SetField(career.FieldName, field.TypeString, value)
	}
	if cuo.mutation.SubjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   career.SubjectsTable,
			Columns: career.SubjectsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subject.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedSubjectsIDs(); len(nodes) > 0 && !cuo.mutation.SubjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   career.SubjectsTable,
			Columns: career.SubjectsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subject.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.SubjectsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   career.SubjectsTable,
			Columns: career.SubjectsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subject.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Career{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{career.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
