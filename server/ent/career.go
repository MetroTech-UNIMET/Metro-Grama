// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"metrograma/ent/career"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Career is the model entity for the Career schema.
type Career struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CareerQuery when eager-loading is set.
	Edges        CareerEdges `json:"edges"`
	selectValues sql.SelectValues
}

// CareerEdges holds the relations/edges for other nodes in the graph.
type CareerEdges struct {
	// Subjects holds the value of the subjects edge.
	Subjects []*Subject `json:"subjects,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// SubjectsOrErr returns the Subjects value or an error if the edge
// was not loaded in eager-loading.
func (e CareerEdges) SubjectsOrErr() ([]*Subject, error) {
	if e.loadedTypes[0] {
		return e.Subjects, nil
	}
	return nil, &NotLoadedError{edge: "subjects"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Career) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case career.FieldName:
			values[i] = new(sql.NullString)
		case career.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Career fields.
func (c *Career) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case career.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				c.ID = *value
			}
		case career.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				c.Name = value.String
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Career.
// This includes values selected through modifiers, order, etc.
func (c *Career) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// QuerySubjects queries the "subjects" edge of the Career entity.
func (c *Career) QuerySubjects() *SubjectQuery {
	return NewCareerClient(c.config).QuerySubjects(c)
}

// Update returns a builder for updating this Career.
// Note that you need to call Career.Unwrap() before calling this method if this Career
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Career) Update() *CareerUpdateOne {
	return NewCareerClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Career entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Career) Unwrap() *Career {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Career is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Career) String() string {
	var builder strings.Builder
	builder.WriteString("Career(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("name=")
	builder.WriteString(c.Name)
	builder.WriteByte(')')
	return builder.String()
}

// Careers is a parsable slice of Career.
type Careers []*Career
